openapi: 3.0.0
paths:
  /sca/{agent_id}:
    get:
      tags:
      - SCA
      summary: Get results
      description: Return the security SCA database of an agent
      operationId: api.controllers.sca_controller.get_sca_agent
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/sca:read'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/agent_id'
      - $ref: '#/components/parameters/sca_name'
      - $ref: '#/components/parameters/description'
      - $ref: '#/components/parameters/references'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/distinct'
      responses:
        '200':
          description: SCA database elements
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseSCADatabase'
              example:
                data:
                  affected_items:
                  - description: This document provides prescriptive guidance for
                      establishing a secure configuration posture for Ubuntu Linux
                      20.04 LTS.
                    fail: 87
                    start_scan: '2022-09-27T08:07:02+00:00'
                    references: https://www.cisecurity.org/cis-benchmarks/
                    name: CIS benchmark for Ubuntu Linux 20.04 LTS
                    pass: 56
                    score: 39
                    end_scan: '2022-09-27T08:07:02+00:00'
                    policy_id: cis_ubuntu20-04
                    total_checks: 191
                    hash_file: fb41fe9660f4320aaed0c3c292c8602953df7f8c42b37b724855f9005c43fafc
                    invalid: 48
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: All selected SCA information was returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /sca/{agent_id}/checks/{policy_id}:
    get:
      tags:
      - SCA
      summary: Get policy checks
      description: Return the policy monitoring alerts for a given policy
      operationId: api.controllers.sca_controller.get_sca_checks
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/sca:read'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/agent_id'
      - $ref: '#/components/parameters/policy_id'
      - $ref: '#/components/parameters/title'
      - $ref: '#/components/parameters/description'
      - $ref: '#/components/parameters/rationale'
      - $ref: '#/components/parameters/remediation'
      - $ref: '#/components/parameters/command'
      - $ref: '#/components/parameters/reason'
      - $ref: '#/components/parameters/full_path_filter'
      - $ref: '#/components/parameters/process'
      - $ref: '#/components/parameters/directory'
      - $ref: '#/components/parameters/registry'
      - $ref: '#/components/parameters/references'
      - $ref: '#/components/parameters/result'
      - $ref: '#/components/parameters/condition'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/distinct'
      responses:
        '200':
          description: List of SCA Checks for a given policy ID
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseSCAChecks'
              example:
                data:
                  affected_items:
                  - description: The cramfs filesystem type is a compressed read-only
                      Linux filesystem embedded in small footprint systems. A cramfs
                      image can be used without having to first decompress the image.
                    id: 19000
                    reason: Invalid path or wrong permissions to run command 'modprobe
                      -n -v cramfs'
                    command: modprobe -n -v cramfs,lsmod
                    rationale: Removing support for unneeded filesystem types reduces
                      the local attack surface of the server. If this filesystem type
                      is not needed, disable it.
                    condition: all
                    title: Ensure mounting of cramfs filesystems is disabled.
                    result: not applicable
                    policy_id: cis_ubuntu20-04
                    remediation: '1) Edit or create a file in the /etc/modprobe.d/
                      directory ending in .conf and add the following line: install
                      cramfs /bin/true. 2) Run the following command to unload the
                      cramfs module: # rmmod cramfs'
                    compliance:
                    - value: 1.1.1.1
                      key: cis
                    - value: '5.1'
                      key: cis_csc
                    - value: 2.2.5
                      key: pci_dss
                    - value: CC6.3
                      key: tsc
                    rules:
                    - type: command
                      rule: c:modprobe -n -v cramfs -> r:^install /bin/true
                    - type: numeric
                      rule: not c:lsmod -> r:cramfs
                  total_affected_items: 191
                  total_failed_items: 0
                  failed_items: []
                message: All selected SCA/policy information was returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        message:
          type: string
          description: Human readable description to explain the result of the request
    AllItemsResponseSCADatabase:
      allOf:
      - $ref: '#/components/schemas/AllItemsResponse'
      - type: object
        required:
        - affected_items
        properties:
          affected_items:
            type: array
            description: Items that successfully applied the API call action
            items:
              $ref: '#/components/schemas/SCADatabase'
    AllItemsResponseSCAChecks:
      allOf:
      - $ref: '#/components/schemas/AllItemsResponse'
      - type: object
        required:
        - affected_items
        properties:
          affected_items:
            type: array
            description: Items that successfully applied the API call action
            items:
              $ref: '#/components/schemas/SCAChecks'
  responses:
    ResponseError:
      description: Response to report a bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Bad Request
            detail: '''{invalid_param}'' is not a ''{expected_type}''. Failed validating
              ''format'' in schema[''items'']: {''description'': ''{parameter_name}'',
              ''format'': ''{expected_format}'', ''minLength'': {expected_length},
              ''type'': ''{expected_type}'', ''x-scope'': ['''', ''#/components/parameters/{parameter_name}'']}'
    PermissionDeniedResponse:
      description: Response to report a permission denied request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            title: Permission Denied
            detail: 'Permission denied: Resource type: *:*'
            remediation: Please, make sure you have permissions to execute the current
              request. For more information on how to set up permissions, please visit
              https://documentation.wazuh.com/4.9/user-manual/api/rbac/configuration.html
            error: 4000
            dapi_errors:
              unknown-node:
                error: 'Permission denied: Resource type: *:*'
    UnauthorizedResponse:
      description: Response to report an unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Unauthorized
            detail: No authorization token provided
    InvalidHTTPMethodResponse:
      description: Response to report an invalid HTTP method
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Method Not Allowed
            detail: Specified method is invalid for this resource
    TooManyRequestsResponse:
      description: Maximum number of request per minute reached
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Wazuh Error
            detail: Maximum number of requests per minute reached
            remediation: 'This limit can be changed in api.yaml file. More information
              here: https://documentation.wazuh.com/4.9/user-manual/api/security/configuration.html'
            code: 6001
  parameters:
    agent_id:
      in: path
      name: agent_id
      description: Agent ID. All possible values from 000 onwards
      required: true
      schema:
        $ref: '#/components/schemas/AgentID'
    command:
      in: query
      name: command
      description: Filter by command
      schema:
        type: string
        format: symbols_alphanumeric_param
    description:
      in: query
      name: description
      description: Filter by policy description
      schema:
        type: string
        format: alphanumeric_symbols
    directory:
      in: query
      name: directory
      description: Filter by directory
      schema:
        type: string
    full_path_filter:
      in: query
      name: file
      description: Filter by full path
      schema:
        type: string
        format: paths
    limit:
      in: query
      name: limit
      description: 'Maximum number of elements to return. Although up to 100.000 can
        be specified, it is recommended not to exceed 500 elements. Responses may
        be slower the more this number is exceeded. '
      schema:
        type: integer
        format: int32
        default: 500
        minimum: 1
        maximum: 100000
    sca_name:
      in: query
      name: name
      description: Filter by policy name
      schema:
        type: string
    offset:
      in: query
      name: offset
      description: First element to return in the collection
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
    pretty:
      in: query
      name: pretty
      description: Show results in human-readable format
      schema:
        type: boolean
        default: false
    process:
      in: query
      name: process
      description: Filter by process name
      schema:
        type: string
        format: alphanumeric
    policy_id:
      in: path
      name: policy_id
      description: Filter by policy id
      required: true
      schema:
        type: string
        format: alphanumeric
    query:
      in: query
      name: q
      description: Query to filter results by. For example q=&quot;status=active&quot;
      schema:
        type: string
    rationale:
      in: query
      name: rationale
      description: Filter by rationale
      schema:
        type: string
        format: alphanumeric_symbols
    registry:
      in: query
      name: registry
      description: Filter by registry
      schema:
        type: string
        format: alphanumeric
    references:
      in: query
      name: references
      description: Filter by references
      schema:
        type: string
    remediation:
      in: query
      name: remediation
      description: Filter by remediation
      schema:
        type: string
        format: alphanumeric_symbols
    result:
      in: query
      name: result
      description: Filter by result
      schema:
        type: string
        format: alphanumeric
    condition:
      in: query
      name: condition
      description: Filter by condition
      schema:
        type: string
    reason:
      in: query
      name: reason
      description: Filter by reason
      schema:
        type: string
        format: alphanumeric_symbols
    search:
      in: query
      name: search
      description: Look for elements containing the specified string. To obtain a
        complementary search, use '-' at the beginning
      schema:
        type: string
        format: search
    select:
      in: query
      name: select
      description: 'Select which fields to return (separated by comma). Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: array
        items:
          type: string
          format: names
    sort:
      in: query
      name: sort
      description: 'Sort the collection by a field or fields (separated by comma).
        Use +/- at the beggining to list in ascending or descending order. Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: string
        format: sort
    title:
      in: query
      name: title
      description: Filter by title
      schema:
        type: string
        format: alphanumeric_symbols
    wait_for_complete:
      in: query
      name: wait_for_complete
      description: Disable timeout response
      schema:
        type: boolean
        default: false
    distinct:
      in: query
      name: distinct
      description: Look for distinct values.
      schema:
        type: boolean
        default: false

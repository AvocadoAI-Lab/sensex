openapi: 3.0.0
paths:
  /rules:
    get:
      tags:
      - Rules
      summary: List rules
      description: Return a list containing information about each rule such as file
        where it's defined, description, rule group, status, etc
      operationId: api.controllers.rule_controller.get_rules
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/rules:read'
      parameters:
      - $ref: '#/components/parameters/rule_ids'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/statusRLDParam'
      - $ref: '#/components/parameters/group'
      - $ref: '#/components/parameters/level'
      - $ref: '#/components/parameters/filename'
      - $ref: '#/components/parameters/get_dirnames_path'
      - $ref: '#/components/parameters/pci_dss'
      - $ref: '#/components/parameters/gdpr'
      - $ref: '#/components/parameters/gpg13'
      - $ref: '#/components/parameters/hipaa'
      - $ref: '#/components/parameters/nist-800-53'
      - $ref: '#/components/parameters/tsc'
      - $ref: '#/components/parameters/mitre'
      - $ref: '#/components/parameters/distinct'
      responses:
        '200':
          description: Rule
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseRules'
              example:
                data:
                  affected_items:
                  - filename: 0020-syslog_rules.xml
                    relative_dirname: ruleset/rules
                    id: 1001
                    level: 2
                    status: enabled
                    details:
                      match:
                        pattern: ^Couldn't open /etc/securetty
                    pci_dss:
                    - 0.2.4
                    gpg13:
                    - '4.1'
                    gdpr:
                    - IV_35.7.d
                    hipaa:
                    - 164.312.b
                    nist_800_53:
                    - AU.14
                    - AC.7
                    tsc:
                    - CC6.1
                    - CC6.8
                    - CC7.2
                    - CC7.3
                    mitre: []
                    groups:
                    - syslog
                    - errors
                    description: File missing. Root access unrestricted.
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: All selected rules were returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /rules/groups:
    get:
      tags:
      - Rules
      summary: Get groups
      description: Return a list containing all rule groups names
      operationId: api.controllers.rule_controller.get_rules_groups
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/rules:read'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: Rule groups names
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - active_response
                  - agentless
                  - attacks
                  - firewall
                  - gdpr_II_5.1.f
                  - gdpr_IV_30.1.g
                  total_affected_items: 6
                  total_failed_items: 0
                  failed_items: []
                message: All groups in rules were returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /rules/requirement/{requirement}:
    get:
      tags:
      - Rules
      summary: Get requirements
      description: Return all specified requirement names defined in the Wazuh ruleset
      operationId: api.controllers.rule_controller.get_rules_requirement
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/rules:read'
      parameters:
      - $ref: '#/components/parameters/rule_requirement'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: Requirements names
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - A1.2
                  - CC6.1
                  - CC6.2
                  - CC6.3
                  total_affected_items: 4
                  total_failed_items: 0
                  failed_items: []
                message: All selected rules were returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /rules/files:
    get:
      tags:
      - Rules
      summary: Get files
      description: Return a list containing all files used to define rules and their
        status
      operationId: api.controllers.rule_controller.get_rules_files
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/rules:read'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/get_dirnames_path'
      - $ref: '#/components/parameters/xml_filename'
      - $ref: '#/components/parameters/statusRLDParam'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/distinct'
      responses:
        '200':
          description: Rule
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseRulesFiles'
              example:
                data:
                  affected_items:
                  - file: 0010-rules_config.xml
                    relative_dirname: ruleset/rules
                    status: enabled
                  - file: 0015-ossec_rules.xml
                    relative_dirname: ruleset/rules
                    status: enabled
                  - file: 0016-wazuh_rules.xml
                    relative_dirname: ruleset/rules
                    status: enabled
                  - file: 0020-syslog_rules.xml
                    relative_dirname: ruleset/rules
                    status: enabled
                  total_affected_items: 4
                  total_failed_items: 0
                  failed_items: []
                message: All rules files were returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /rules/files/{filename}:
    get:
      tags:
      - Rules
      summary: Get rules file content
      description: Get the content of a specified rule in the ruleset
      operationId: api.controllers.rule_controller.get_file
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/rules:read'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/xml_filename_path'
      - $ref: '#/components/parameters/raw'
      - $ref: '#/components/parameters/get_dirnames_path'
      responses:
        '200':
          description: Rule content
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - group:
                    - '@name': syslog,
                      rule:
                        '@id': '1'
                        '@level': '0'
                        '@noalert': '1'
                        category: syslog
                        description: Generic template for all syslog rules.
                    - '@name': firewall,
                      rule:
                        '@id': '2'
                        '@level': '0'
                        '@noalert': '1'
                        category: firewall
                        description: Generic template for all firewall rules.
                    - '@name': ids,
                      rule:
                        '@id': '3'
                        '@level': '0'
                        '@noalert': '1'
                        category: ids
                        description: Generic template for all ids rules.
                    - '@name': web-log,
                      rule:
                        '@id': '4'
                        '@level': '0'
                        '@noalert': '1'
                        category: web-log
                        description: Generic template for all web rules.
                    - '@name': squid,
                      rule:
                        '@id': '5'
                        '@level': '0'
                        '@noalert': '1'
                        category: squid
                        description: Generic template for all web proxy rules.
                    - '@name': windows,
                      rule:
                        '@id': '6'
                        '@level': '0'
                        '@noalert': '1'
                        category: windows
                        description: Generic template for all windows rules.
                    - '@name': ossec,
                      rule:
                        '@id': '7'
                        '@level': '0'
                        '@noalert': '1'
                        category: ossec
                        description: Generic template for all wazuh rules.
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: Selected rule was returned
                error: 0
            application/xml:
              schema:
                type: string
              example: "<!--\n  -  Rules config\n  -  Author: Daniel Cid.\n  -  Updated\
                \ by Wazuh, Inc.\n  -  Copyright (C) 2015, Wazuh Inc.\n  -  Copyright\
                \ (C) 2009 Trend Micro Inc.\n  -  This program is a free software;\
                \ you can redistribute it and/or modify it under the terms of GPLv2.\n\
                -->\n<group name=\"syslog,\">\n  <rule id=\"1\" level=\"0\" noalert=\"\
                1\">\n    <category>syslog</category>\n    <description>Generic template\
                \ for all syslog rules.</description>\n  </rule>\n</group>\n<group\
                \ name=\"firewall,\">\n  <rule id=\"2\" level=\"0\" noalert=\"1\"\
                >\n    <category>firewall</category>\n    <description>Generic template\
                \ for all firewall rules.</description>\n  </rule>\n</group>\n<group\
                \ name=\"ids,\">\n  <rule id=\"3\" level=\"0\" noalert=\"1\">\n  \
                \  <category>ids</category>\n    <description>Generic template for\
                \ all ids rules.</description>\n  </rule>\n</group>\n<group name=\"\
                web-log,\">\n  <rule id=\"4\" level=\"0\" noalert=\"1\">\n    <category>web-log</category>\n\
                \    <description>Generic template for all web rules.</description>\n\
                \  </rule>\n</group>\n<group name=\"squid,\">\n  <rule id=\"5\" level=\"\
                0\" noalert=\"1\">\n    <category>squid</category>\n    <description>Generic\
                \ template for all web proxy rules.</description>\n  </rule>\n</group>\n\
                <group name=\"windows,\">\n  <rule id=\"6\" level=\"0\" noalert=\"\
                1\">\n    <category>windows</category>\n    <description>Generic template\
                \ for all windows rules.</description>\n  </rule>\n</group>\n<group\
                \ name=\"ossec,\">\n  <rule id=\"7\" level=\"0\" noalert=\"1\">\n\
                \    <category>ossec</category>\n    <description>Generic template\
                \ for all ossec rules.</description>\n  </rule>\n</group>\n"
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    put:
      tags:
      - Rules
      summary: Update rules file
      description: Upload or replace a user ruleset file content
      operationId: api.controllers.rule_controller.put_file
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/rules:update'
      - $ref: '#/x-rbac-catalog/actions/rules:delete'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/xml_filename_path'
      - $ref: '#/components/parameters/overwrite'
      - $ref: '#/components/parameters/get_dirnames_path'
      requestBody:
        description: Content of the rule to be uploaded
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Confirmation message
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - etc/rules/new_rule.xml
                  failed_items: []
                  total_affected_items: 1
                  total_failed_items: 0
                message: Rule was successfully uploaded
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '413':
          $ref: '#/components/responses/RequestTooLargeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Rules
      summary: Delete rules file
      description: Delete a specified rule file
      operationId: api.controllers.rule_controller.delete_file
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/rules:delete'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/xml_filename_path'
      - $ref: '#/components/parameters/get_dirnames_path'
      responses:
        '200':
          description: Confirmation message
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - etc/rules/new_rule.xml
                  failed_items: []
                  total_affected_items: 1
                  total_failed_items: 0
                message: Rule was successfully deleted
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        message:
          type: string
          description: Human readable description to explain the result of the request
    AllItemsResponse:
      type: object
      required:
      - total_affected_items
      - failed_items
      - total_failed_items
      properties:
        total_affected_items:
          type: integer
          format: int32
          description: Number of items that have successfully applied the requested
            operation
        failed_items:
          type: array
          description: List of items that have failed applying the requested operation
          items:
            $ref: '#/components/schemas/SimpleApiError'
        total_failed_items:
          type: integer
          format: int32
          description: Number of items that have failed applying the requested operation
    AllItemsResponseRules:
      allOf:
      - $ref: '#/components/schemas/AllItemsResponse'
      - type: object
        required:
        - affected_items
        properties:
          affected_items:
            type: array
            description: Items that successfully applied the API call action
            items:
              $ref: '#/components/schemas/Rule'
    AllItemsResponseRulesFiles:
      allOf:
      - $ref: '#/components/schemas/AllItemsResponse'
      - type: object
        required:
        - affected_items
        properties:
          affected_items:
            type: array
            description: Items that successfully applied the API call action
            items:
              $ref: '#/components/schemas/RuleFile'
  responses:
    ResponseError:
      description: Response to report a bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Bad Request
            detail: '''{invalid_param}'' is not a ''{expected_type}''. Failed validating
              ''format'' in schema[''items'']: {''description'': ''{parameter_name}'',
              ''format'': ''{expected_format}'', ''minLength'': {expected_length},
              ''type'': ''{expected_type}'', ''x-scope'': ['''', ''#/components/parameters/{parameter_name}'']}'
    PermissionDeniedResponse:
      description: Response to report a permission denied request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            title: Permission Denied
            detail: 'Permission denied: Resource type: *:*'
            remediation: Please, make sure you have permissions to execute the current
              request. For more information on how to set up permissions, please visit
              https://documentation.wazuh.com/4.9/user-manual/api/rbac/configuration.html
            error: 4000
            dapi_errors:
              unknown-node:
                error: 'Permission denied: Resource type: *:*'
    UnauthorizedResponse:
      description: Response to report an unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Unauthorized
            detail: No authorization token provided
    InvalidHTTPMethodResponse:
      description: Response to report an invalid HTTP method
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Method Not Allowed
            detail: Specified method is invalid for this resource
    WrongContentTypeResponse:
      description: Response to report an invalid content-type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Wazuh Error
            detail: The body type is not the one specified in the content-type
            error: 6002
    RequestTooLargeResponse:
      description: Maximum request body size exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Request Entity Too Large
            detail: Maximum request body size 1048576 exceeded, actual body size 1225245
    TooManyRequestsResponse:
      description: Maximum number of request per minute reached
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Wazuh Error
            detail: Maximum number of requests per minute reached
            remediation: 'This limit can be changed in api.yaml file. More information
              here: https://documentation.wazuh.com/4.9/user-manual/api/security/configuration.html'
            code: 6001
  parameters:
    filename:
      in: query
      name: filename
      description: Filter by filename
      schema:
        type: array
        items:
          type: string
          format: alphanumeric
    limit:
      in: query
      name: limit
      description: 'Maximum number of elements to return. Although up to 100.000 can
        be specified, it is recommended not to exceed 500 elements. Responses may
        be slower the more this number is exceeded. '
      schema:
        type: integer
        format: int32
        default: 500
        minimum: 1
        maximum: 100000
    offset:
      in: query
      name: offset
      description: First element to return in the collection
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
    pretty:
      in: query
      name: pretty
      description: Show results in human-readable format
      schema:
        type: boolean
        default: false
    query:
      in: query
      name: q
      description: Query to filter results by. For example q=&quot;status=active&quot;
      schema:
        type: string
    raw:
      in: query
      name: raw
      description: Format response in plain text
      required: false
      schema:
        type: boolean
    rule_requirement:
      in: path
      name: requirement
      required: true
      schema:
        type: string
        enum:
        - pci_dss
        - gdpr
        - hipaa
        - nist-800-53
        - gpg13
        - tsc
        - mitre
    rule_ids:
      in: query
      name: rule_ids
      description: List of rule IDs
      schema:
        type: array
        items:
          type: integer
          format: int32
          minimum: 1
    search:
      in: query
      name: search
      description: Look for elements containing the specified string. To obtain a
        complementary search, use '-' at the beginning
      schema:
        type: string
        format: search
    select:
      in: query
      name: select
      description: 'Select which fields to return (separated by comma). Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: array
        items:
          type: string
          format: names
    sort:
      in: query
      name: sort
      description: 'Sort the collection by a field or fields (separated by comma).
        Use +/- at the beggining to list in ascending or descending order. Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: string
        format: sort
    statusRLDParam:
      in: query
      name: status
      description: Filter by list status. Use commas to enter multiple statuses
      schema:
        type: string
        enum:
        - enabled
        - disabled
        - all
        minItems: 1
    wait_for_complete:
      in: query
      name: wait_for_complete
      description: Disable timeout response
      schema:
        type: boolean
        default: false
    get_dirnames_path:
      in: query
      name: relative_dirname
      description: Filter by relative directory name
      schema:
        type: string
        format: get_dirnames_path
    overwrite:
      in: query
      name: overwrite
      description: If set to false, an exception will be raised when updating contents
        of an already existing filename
      schema:
        type: boolean
        default: false
    group:
      in: query
      name: group
      description: Filter by rule group
      schema:
        type: string
        format: alphanumeric
    level:
      in: query
      name: level
      description: Filter by rule level. Can be a single level (4) or an interval
        (2-4)
      schema:
        type: string
        format: range
    pci_dss:
      in: query
      name: pci_dss
      description: Filter by PCI_DSS requirement name
      schema:
        type: string
        format: alphanumeric
    gdpr:
      in: query
      name: gdpr
      description: Filter by GDPR requirement
      schema:
        type: string
        format: alphanumeric
    gpg13:
      in: query
      name: gpg13
      description: Filter by GPG13 requirement
      schema:
        type: string
        format: alphanumeric
    hipaa:
      in: query
      name: hipaa
      description: Filter by HIPAA requirement
      schema:
        type: string
        format: alphanumeric
    nist-800-53:
      in: query
      name: nist-800-53
      description: Filter by NIST-800-53 requirement
      schema:
        type: string
        format: alphanumeric
    tsc:
      in: query
      name: tsc
      description: Filters by TSC requirement
      schema:
        type: string
        format: alphanumeric
    mitre:
      in: query
      name: mitre
      description: Filters by MITRE technique ID
      schema:
        type: string
        format: alphanumeric
    distinct:
      in: query
      name: distinct
      description: Look for distinct values.
      schema:
        type: boolean
        default: false
    xml_filename:
      in: query
      name: filename
      description: Filter by filename of one or more rule or decoder files.
      schema:
        type: array
        items:
          type: string
          format: xml_filename
    xml_filename_path:
      in: path
      name: filename
      description: Filename (rule or decoder) to download/upload/edit file.
      required: true
      schema:
        type: string
        format: xml_filename_path

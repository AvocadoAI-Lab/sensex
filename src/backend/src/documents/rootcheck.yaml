openapi: 3.0.0
paths:
  /rootcheck:
    put:
      tags:
      - Rootcheck
      summary: Run scan
      description: Run rootcheck scan in all agents or a list of them
      operationId: api.controllers.rootcheck_controller.put_rootcheck
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/rootcheck:run'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/agents_list'
      responses:
        '200':
          description: Run rootcheck scan in all agents or a list of them
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - '000'
                  - '001'
                  - '002'
                  - '003'
                  total_affected_items: 4
                  total_failed_items: 0
                  failed_items: []
                message: Rootcheck scan was restarted on returned agents
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /rootcheck/{agent_id}:
    get:
      tags:
      - Rootcheck
      summary: Get results
      description: Return the rootcheck database of an agent
      operationId: api.controllers.rootcheck_controller.get_rootcheck_agent
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/rootcheck:read'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/agent_id'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/distinct'
      - $ref: '#/components/parameters/status'
      - $ref: '#/components/parameters/pci_dss'
      - $ref: '#/components/parameters/cis'
      responses:
        '200':
          description: Return the rootcheck database of an agent
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - date_first: '2020-10-23T10:34:09Z'
                    log: 'Ending CIS-CAT scan. File: /var/ossec/wodles/ciscat/benchmarks/CIS_Ubuntu_Linux_16.04_LTS_Benchmark_v1.0.0-xccdf.xml.'
                    date_last: '2020-10-23T10:34:09Z'
                    status: outstanding
                  - date_first: '2020-10-23T10:33:43Z'
                    log: 'Starting CIS-CAT scan. File: /var/ossec/wodles/ciscat/benchmarks/CIS_Ubuntu_Linux_16.04_LTS_Benchmark_v1.0.0-xccdf.xml.'
                    date_last: '2020-10-23T10:33:49Z'
                    status: outstanding
                  total_affected_items: 2
                  total_failed_items: 0
                  failed_items: []
                message: All selected rootcheck information was returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Rootcheck
      summary: Clear results
      description: Clear an agent's rootcheck database
      operationId: api.controllers.rootcheck_controller.delete_rootcheck
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/rootcheck:clear'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/agent_id'
      responses:
        '200':
          description: Clear an agent's rootcheck database
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - '001'
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: Rootcheck database was cleared on returned agents
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /rootcheck/{agent_id}/last_scan:
    get:
      tags:
      - Rootcheck
      summary: Get last scan datetime
      description: Return the timestamp of the last rootcheck scan of an agent
      operationId: api.controllers.rootcheck_controller.get_last_scan_agent
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/rootcheck:read'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/agent_id'
      responses:
        '200':
          description: Return the timestamp of the last rootcheck scan of an agent
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - start: '2021-05-28T11:49:50Z'
                    end: '2021-05-28T11:49:59Z'
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: Last rootcheck scan of the agent was returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        message:
          type: string
          description: Human readable description to explain the result of the request
    AllItemsResponse:
      type: object
      required:
      - total_affected_items
      - failed_items
      - total_failed_items
      properties:
        total_affected_items:
          type: integer
          format: int32
          description: Number of items that have successfully applied the requested
            operation
        failed_items:
          type: array
          description: List of items that have failed applying the requested operation
          items:
            $ref: '#/components/schemas/SimpleApiError'
        total_failed_items:
          type: integer
          format: int32
          description: Number of items that have failed applying the requested operation
  responses:
    ResponseError:
      description: Response to report a bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Bad Request
            detail: '''{invalid_param}'' is not a ''{expected_type}''. Failed validating
              ''format'' in schema[''items'']: {''description'': ''{parameter_name}'',
              ''format'': ''{expected_format}'', ''minLength'': {expected_length},
              ''type'': ''{expected_type}'', ''x-scope'': ['''', ''#/components/parameters/{parameter_name}'']}'
    PermissionDeniedResponse:
      description: Response to report a permission denied request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            title: Permission Denied
            detail: 'Permission denied: Resource type: *:*'
            remediation: Please, make sure you have permissions to execute the current
              request. For more information on how to set up permissions, please visit
              https://documentation.wazuh.com/4.9/user-manual/api/rbac/configuration.html
            error: 4000
            dapi_errors:
              unknown-node:
                error: 'Permission denied: Resource type: *:*'
    UnauthorizedResponse:
      description: Response to report an unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Unauthorized
            detail: No authorization token provided
    InvalidHTTPMethodResponse:
      description: Response to report an invalid HTTP method
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Method Not Allowed
            detail: Specified method is invalid for this resource
    TooManyRequestsResponse:
      description: Maximum number of request per minute reached
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Wazuh Error
            detail: Maximum number of requests per minute reached
            remediation: 'This limit can be changed in api.yaml file. More information
              here: https://documentation.wazuh.com/4.9/user-manual/api/security/configuration.html'
            code: 6001
  parameters:
    agent_id:
      in: path
      name: agent_id
      description: Agent ID. All possible values from 000 onwards
      required: true
      schema:
        $ref: '#/components/schemas/AgentID'
    limit:
      in: query
      name: limit
      description: 'Maximum number of elements to return. Although up to 100.000 can
        be specified, it is recommended not to exceed 500 elements. Responses may
        be slower the more this number is exceeded. '
      schema:
        type: integer
        format: int32
        default: 500
        minimum: 1
        maximum: 100000
    agents_list:
      in: query
      name: agents_list
      description: List of agent IDs (separated by comma), all agents selected by
        default if not specified
      schema:
        type: array
        items:
          $ref: '#/components/schemas/AgentID'
    offset:
      in: query
      name: offset
      description: First element to return in the collection
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
    pretty:
      in: query
      name: pretty
      description: Show results in human-readable format
      schema:
        type: boolean
        default: false
    query:
      in: query
      name: q
      description: Query to filter results by. For example q=&quot;status=active&quot;
      schema:
        type: string
    search:
      in: query
      name: search
      description: Look for elements containing the specified string. To obtain a
        complementary search, use '-' at the beginning
      schema:
        type: string
        format: search
    select:
      in: query
      name: select
      description: 'Select which fields to return (separated by comma). Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: array
        items:
          type: string
          format: names
    sort:
      in: query
      name: sort
      description: 'Sort the collection by a field or fields (separated by comma).
        Use +/- at the beggining to list in ascending or descending order. Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: string
        format: sort
    status:
      in: query
      name: status
      description: Filter by status
      schema:
        type: string
        format: alphanumeric
    wait_for_complete:
      in: query
      name: wait_for_complete
      description: Disable timeout response
      schema:
        type: boolean
        default: false
    pci_dss:
      in: query
      name: pci_dss
      description: Filter by PCI_DSS requirement name
      schema:
        type: string
        format: alphanumeric
    cis:
      in: query
      name: cis
      description: Filter by CIS requirement
      schema:
        type: string
        format: alphanumeric
    distinct:
      in: query
      name: distinct
      description: Look for distinct values.
      schema:
        type: boolean
        default: false

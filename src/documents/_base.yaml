openapi: 3.0.0
info:
  description: "The Wazuh API is an open-source RESTful API that allows for interaction\
    \ with the Wazuh manager from a web browser,\ncommand line tools like cURL or\
    \ any script or program that can make web requests. The Wazuh WUI relies on this\n\
    heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh\
    \ infrastructure via the Wazuh WUI.\nUse the Wazuh API to easily perform everyday\
    \ actions like adding an agent, restarting the manager(s) or agent(s)\nor looking\
    \ up syscheck details.\n\n# Authentication\n\nWazuh API endpoints require authentication\
    \ to be used. Therefore, all calls must include a JSON Web Token.\nJWT is an open\
    \ standard (RFC 7519) that defines a compact and self-contained way for securely\
    \ transmitting\ninformation between parties as a JSON object. Perform a call with\
    \ `basicAuth` to `POST /security/user/authenticate`\nand obtain a JWT token to\
    \ run any endpoint.\n\nJWT tokens have a default duration of 900 seconds. To change\
    \ this value, you must perform a call with a valid\nJWT token to `PUT /security/config`.\
    \ After this change, you will need to get a new JWT token as all previously\n\
    issued tokens are revoked when any change is performed on security configuration.\n\
    \nLogin with USER and PASSWORD:\n\n`curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"\
    `\n```json\n{\n    \"data\": {\n        \"token\": \"<YOUR_JWT_TOKEN>\"\n    },\n\
    \    \"error\": 0\n}\n```\nUse the token from the previous response to perform\
    \ any endpoint request:\n\n`curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\"\
    \ -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`\n\nChange the token base duration:\n\
    \n`curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization:\
    \ Bearer <YOUR_JWT_TOKEN>\"\n-d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`\n\
    \n<SecurityDefinitions />\n"
  version: 4.9.1
  x-revision: '40914'
  title: Wazuh API REST
  license:
    name: GPL 2.0
    url: https://github.com/wazuh/wazuh/blob/v4.9.1/LICENSE
servers:
- url: '{protocol}://{host}:{port}'
  variables:
    protocol:
      default: https
      enum:
      - http
      - https
    host:
      default: localhost
    port:
      default: '55000'
security:
- jwt: []
components:
  responses:
    PermissionDeniedResponse:
      description: Response to report a permission denied request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            title: Permission Denied
            detail: 'Permission denied: Resource type: *:*'
            remediation: Please, make sure you have permissions to execute the current
              request. For more information on how to set up permissions, please visit
              https://documentation.wazuh.com/4.9/user-manual/api/rbac/configuration.html
            error: 4000
            dapi_errors:
              unknown-node:
                error: 'Permission denied: Resource type: *:*'
    UnauthorizedResponse:
      description: Response to report an unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Unauthorized
            detail: No authorization token provided
    TooManyRequestsResponse:
      description: Maximum number of request per minute reached
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Wazuh Error
            detail: Maximum number of requests per minute reached
            remediation: 'This limit can be changed in api.yaml file. More information
              here: https://documentation.wazuh.com/4.9/user-manual/api/security/configuration.html'
            code: 6001
    ResponseError:
      description: Response to report a bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Bad Request
            detail: '''{invalid_param}'' is not a ''{expected_type}''. Failed validating
              ''format'' in schema[''items'']: {''description'': ''{parameter_name}'',
              ''format'': ''{expected_format}'', ''minLength'': {expected_length},
              ''type'': ''{expected_type}'', ''x-scope'': ['''', ''#/components/parameters/{parameter_name}'']}'
    InvalidHTTPMethodResponse:
      description: Response to report an invalid HTTP method
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Method Not Allowed
            detail: Specified method is invalid for this resource
  parameters:
    limit:
      in: query
      name: limit
      description: 'Maximum number of elements to return. Although up to 100.000 can
        be specified, it is recommended not to exceed 500 elements. Responses may
        be slower the more this number is exceeded. '
      schema:
        type: integer
        format: int32
        default: 500
        minimum: 1
        maximum: 100000
    wait_for_complete:
      in: query
      name: wait_for_complete
      description: Disable timeout response
      schema:
        type: boolean
        default: false
    sort:
      in: query
      name: sort
      description: 'Sort the collection by a field or fields (separated by comma).
        Use +/- at the beggining to list in ascending or descending order. Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: string
        format: sort
    select:
      in: query
      name: select
      description: 'Select which fields to return (separated by comma). Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: array
        items:
          type: string
          format: names
    pretty:
      in: query
      name: pretty
      description: Show results in human-readable format
      schema:
        type: boolean
        default: false
    search:
      in: query
      name: search
      description: Look for elements containing the specified string. To obtain a
        complementary search, use '-' at the beginning
      schema:
        type: string
        format: search
    offset:
      in: query
      name: offset
      description: First element to return in the collection
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
  schemas: {}

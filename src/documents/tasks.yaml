openapi: 3.0.0
paths:
  /tasks/status:
    get:
      tags:
      - Tasks
      summary: List tasks
      description: Returns all available information about the specified tasks
      operationId: api.controllers.task_controller.get_tasks_status
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/task:status'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/agents_list'
      - $ref: '#/components/parameters/tasks_list'
      - $ref: '#/components/parameters/command'
      - $ref: '#/components/parameters/node'
      - $ref: '#/components/parameters/module'
      - $ref: '#/components/parameters/status'
      responses:
        '200':
          description: Tasks's status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                data:
                  affected_items:
                  - message: Success
                    agent: 2
                    task_id: 1
                    node: worker2
                    module: upgrade_module
                    command: upgrade
                    status: In progress
                    create_time: 2020-11-10 11:55:33+00:00
                    update_time: 2020-11-10 11:55:36+00:00
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: All specified task's status were returned
                error: 0
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        message:
          type: string
          description: Human readable description to explain the result of the request
  responses: {}
  parameters:
    command:
      in: query
      name: command
      description: Filter by command
      schema:
        type: string
        format: symbols_alphanumeric_param
    limit:
      in: query
      name: limit
      description: 'Maximum number of elements to return. Although up to 100.000 can
        be specified, it is recommended not to exceed 500 elements. Responses may
        be slower the more this number is exceeded. '
      schema:
        type: integer
        format: int32
        default: 500
        minimum: 1
        maximum: 100000
    agents_list:
      in: query
      name: agents_list
      description: List of agent IDs (separated by comma), all agents selected by
        default if not specified
      schema:
        type: array
        items:
          $ref: '#/components/schemas/AgentID'
    node:
      in: query
      name: node
      description: Show results filtered by node
      schema:
        type: string
        format: alphanumeric
    module:
      in: query
      name: module
      description: Show results filtered by module
      schema:
        type: string
        format: alphanumeric
    offset:
      in: query
      name: offset
      description: First element to return in the collection
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
    pretty:
      in: query
      name: pretty
      description: Show results in human-readable format
      schema:
        type: boolean
        default: false
    query:
      in: query
      name: q
      description: Query to filter results by. For example q=&quot;status=active&quot;
      schema:
        type: string
    tasks_list:
      in: query
      name: tasks_list
      description: List of task IDs (separated by comma)
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Task_id'
    search:
      in: query
      name: search
      description: Look for elements containing the specified string. To obtain a
        complementary search, use '-' at the beginning
      schema:
        type: string
        format: search
    select:
      in: query
      name: select
      description: 'Select which fields to return (separated by comma). Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: array
        items:
          type: string
          format: names
    sort:
      in: query
      name: sort
      description: 'Sort the collection by a field or fields (separated by comma).
        Use +/- at the beggining to list in ascending or descending order. Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: string
        format: sort
    status:
      in: query
      name: status
      description: Filter by status
      schema:
        type: string
        format: alphanumeric
    wait_for_complete:
      in: query
      name: wait_for_complete
      description: Disable timeout response
      schema:
        type: boolean
        default: false

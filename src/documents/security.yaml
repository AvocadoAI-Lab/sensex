openapi: 3.0.0
paths:
  /security/user/authenticate:
    post:
      tags:
      - Security
      summary: Login
      description: 'This method should be called to get an API token. This token will
        expire after auth_token_exp_timeout seconds (default: 900). This value can
        be changed using PUT /security/config'
      operationId: api.controllers.security_controller.login_user
      parameters:
      - $ref: '#/components/parameters/raw'
      security:
      - basicAuth: []
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Token'
              example:
                data:
                  token: <generated_token>
                  error: 0
            text/plain:
              schema:
                type: string
              example: <generated_token>
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/InvalidCredentialsResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    get:
      tags:
      - Security
      summary: Login
      deprecated: true
      description: 'This method should be called to get an API token. This token will
        expire after auth_token_exp_timeout seconds (default: 900). This value can
        be changed using PUT /security/config'
      operationId: api.controllers.security_controller.deprecated_login_user
      parameters:
      - $ref: '#/components/parameters/raw'
      security:
      - basicAuth: []
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Token'
              example:
                data:
                  token: <generated_token>
                  error: 0
            text/plain:
              schema:
                type: string
              example: <generated_token>
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/InvalidCredentialsResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Security
      summary: Logout current user
      description: This method should be called to invalidate all the current user's
        tokens
      operationId: api.controllers.security_controller.logout_user
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                data:
                  message: User wazuh was successfully logged out
                  error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/user/authenticate/run_as:
    post:
      tags:
      - Security
      summary: Login auth_context
      description: 'This method should be called to get an API token using an authorization
        context body. This token will expire after auth_token_exp_timeout seconds
        (default: 900). This value can be changed using PUT /security/config'
      operationId: api.controllers.security_controller.run_as_login
      parameters:
      - $ref: '#/components/parameters/raw'
      security:
      - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              name: Initial_auth
              auth:
                name: Wazuh
                office:
                - '20'
                - '21'
                - '30'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              example:
                data:
                  token: <generated_token>
                  error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/InvalidCredentialsResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '413':
          $ref: '#/components/responses/RequestTooLargeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/users/me:
    get:
      tags:
      - Security
      summary: Get current user info
      description: Get the information of the current user
      operationId: api.controllers.security_controller.get_user_me
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Information about current user
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseUsers'
                example:
                  data:
                    affected_items:
                    - id: 1
                      username: wazuh
                      allow_run_as: true
                      roles:
                      - id: 1
                        name: administrator
                        rule:
                          FIND:
                            r'^auth[a-zA-Z]+$':
                            - full_admin
                        policies:
                        - id: 1
                          name: agents_all_resourceless
                          policy:
                            actions:
                            - agent:create
                            - group:create
                            resources:
                            - '*:*:*'
                            effect: allow
                        - id: 2
                          name: agents_all_agents
                          policy:
                            actions:
                            - agent:read
                            - agent:delete
                            - agent:modify_group
                            - agent:reconnect
                            - agent:restart
                            - agent:upgrade
                            resources:
                            - agent:id:*
                            - agent:group:*
                            effect: allow
                    total_affected_items: 1
                    total_failed_items: 0
                    failed_items: []
                  message: Current user information was returned
                  error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/users/me/policies:
    get:
      tags:
      - Security
      summary: Get current user processed policies
      description: Get the processed policies information for the current user
      operationId: api.controllers.security_controller.get_user_me_policies
      parameters:
      - $ref: '#/components/parameters/pretty'
      responses:
        '200':
          description: Information about current user processed policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                data:
                  syscheck:run:
                    agent:id:*: allow
                  syscollector:read:
                    agent:id:*: allow
                  rbac_mode: black
                message: Current user processed policies information was returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/user/revoke:
    put:
      tags:
      - Security
      summary: Revoke JWT tokens
      description: This method should be called to revoke all active JWT tokens
      operationId: api.controllers.security_controller.revoke_all_tokens
      responses:
        '200':
          description: Tokens were successfully revoked
          content:
            application/json:
              schema:
                type: object
              example:
                message: Tokens were successfully revoked
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/users/{user_id}/run_as:
    put:
      tags:
      - Security
      summary: Enable/Disable run_as
      description: Modify a user's allow_run_as flag by specifying their ID
      operationId: api.controllers.security_controller.edit_run_as
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:edit_run_as'
      parameters:
      - $ref: '#/components/parameters/user_id_required'
      - $ref: '#/components/parameters/allow_run_as'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: User's flag changed successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseUsers'
                example:
                  data:
                    affected_items:
                    - id: 1
                      username: wazuh
                      allow_run_as: true
                      roles:
                      - 1
                    total_affected_items: 1
                    total_failed_items: 0
                    failed_items: []
                  message: Parameter allow_run_as has been enabled for the user
                  error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/actions:
    get:
      tags:
      - Security
      summary: List RBAC actions
      description: Get all RBAC actions, including the potential related resources
        and endpoints.
      operationId: api.controllers.security_controller.get_rbac_actions
      parameters:
      - $ref: '#/components/parameters/endpoint'
      - $ref: '#/components/parameters/pretty'
      responses:
        '200':
          description: Return a list of RBAC actions
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
              example:
                active-response:command:
                  description: Allow to execute active response commands in the agents
                  resources:
                  - agent:id
                  example:
                    actions:
                    - active-response:command
                    resources:
                    - agent:id:001
                    effect: allow
                  related_endpoints:
                  - PUT /active-response
                agent:create:
                  description: Create new agents
                  resources:
                  - '*:*'
                  example:
                    actions:
                    - agent:create
                    resources:
                    - '*:*:*'
                    effect: allow
                  related_endpoints:
                  - POST /agents
                  - POST /agents/insert
                  - POST /agents/insert/quick
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/resources:
    get:
      tags:
      - Security
      summary: List RBAC resources
      description: This method should be called to get all current defined RBAC resources.
      operationId: api.controllers.security_controller.get_rbac_resources
      parameters:
      - $ref: '#/components/parameters/resource_list'
      - $ref: '#/components/parameters/pretty'
      responses:
        '200':
          description: Return all RBAC resources
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
              example:
                data:
                  '*:*':
                    description: Resource applied in functions acting on resources
                      that do not yet exist in the system. We call these functions,
                      resourceless functions
                  agent:group:
                    description: Reference agents via group name (i.e. agent:group:web)
                  agent:id:
                    description: Reference agents via agent ID (i.e. agent:id:001)
                  group:id:
                    description: Reference agent groups via group ID (i.e. group:id:default)
                  node:id:
                    description: Reference cluster nodes via node ID (i.e. node:id:worker1)
                  decoder:file:
                    description: Reference decoder files via its path (i.e. decoder:file:0005-wazuh_decoders.xml)
                  list:file:
                    description: Reference list files via its filename (i.e. list:file:audit-keys)
                  rule:file:
                    description: Reference rule files via its path (i.e. rule:file:0610-win-ms_logs_rules.xml)
                  policy:id:
                    description: Reference security policies via its id (i.e. policy:id:1)
                  role:id:
                    description: Reference security roles via its id (i.e. role:id:1)
                  rule:id:
                    description: Reference security rules via its id (i.e. rule:id:1)
                  user:id:
                    description: Reference security users via its id (i.e. user:id:1)
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/users:
    get:
      tags:
      - Security
      summary: List users
      description: Get the information of a specified user
      operationId: api.controllers.security_controller.get_users
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:read'
      parameters:
      - $ref: '#/components/parameters/user_ids'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/distinct'
      responses:
        '200':
          description: Information about user
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseUsers'
                example:
                  data:
                    affected_items:
                    - id: 3
                      username: administrator
                      allow_run_as: true
                      roles:
                      - 2
                    - id: 4
                      username: guest
                      allow_run_as: false
                      roles: []
                    - id: 5
                      username: normal
                      allow_run_as: false
                      roles:
                      - 4
                      - 5
                      - 6
                    - id: 6
                      username: ossec
                      allow_run_as: true
                      roles:
                      - 2
                      - 5
                    - username: python
                      allow_run_as: true
                      roles: []
                    - id: 7
                      username: rbac
                      allow_run_as: false
                      roles:
                      - 3
                      - 4
                      - 5
                    - id: 1
                      username: wazuh
                      allow_run_as: true
                      roles:
                      - 1
                    - id: 2
                      username: wazuh-wui
                      allow_run_as: true
                      roles: []
                    total_affected_items: 8
                    total_failed_items: 0
                    failed_items: []
                  message: All specified users were returned
                  error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    post:
      tags:
      - Security
      summary: Add user
      description: Add a new API user to the system
      operationId: api.controllers.security_controller.create_user
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:create_user'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 4
                  maxLength: 64
                  format: names
                password:
                  type: string
                  format: password
              required:
              - username
              - password
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseUsers'
                example:
                  data:
                    affected_items:
                    - id: 100
                      username: TestWazuh
                      allow_run_as: false
                      roles: []
                    total_affected_items: 1
                    total_failed_items: 0
                    failed_items: []
                  message: User was successfully created
                  error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '413':
          $ref: '#/components/responses/RequestTooLargeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Security
      summary: Delete users
      description: Delete a list of users by specifying their IDs
      operationId: api.controllers.security_controller.delete_users
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:delete'
      parameters:
      - $ref: '#/components/parameters/user_ids_delete'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: User deleted successful
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseUsers'
                example:
                  data:
                    affected_items:
                    - id: 100
                      username: new_user
                      allow_run_as: false
                      roles: []
                    - id: 102
                      username: another_user
                      allow_run_as: true
                      roles:
                      - 6
                    total_affected_items: 2
                    total_failed_items: 0
                    failed_items: []
                  message: Users were successfully deleted
                  error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/users/{user_id}:
    put:
      tags:
      - Security
      summary: Update users
      description: Modify a user's password by specifying their ID
      operationId: api.controllers.security_controller.update_user
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:update'
      parameters:
      - $ref: '#/components/parameters/user_id_required'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User updated successful
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseUsers'
                example:
                  data:
                    affected_items:
                    - id: 100
                      username: wazuh-test
                      allow_run_as: false
                      roles:
                      - 2
                    total_affected_items: 1
                    total_failed_items: 0
                    failed_items: []
                  message: User was successfully updated
                  error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/roles:
    get:
      tags:
      - Security
      summary: List roles
      description: 'For a specific list, indicate the ids separated by commas. Example:
        ?role_ids=1,2,3'
      operationId: api.controllers.security_controller.get_roles
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:read'
      parameters:
      - $ref: '#/components/parameters/role_ids'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/distinct'
      responses:
        '200':
          description: Return a list of roles
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseRoles'
              example:
                data:
                  affected_items:
                  - id: 1
                    name: administrator
                    policies:
                    - 1
                    - 2
                    - 3
                    - 6
                    - 7
                    - 8
                    - 29
                    - 30
                    - 12
                    - 14
                    - 15
                    - 18
                    - 19
                    - 21
                    - 23
                    - 24
                    - 16
                    - 25
                    - 27
                    - 28
                    - 33
                    - 34
                    - 35
                    users:
                    - 1
                    - 2
                    rules:
                    - 1
                    - 2
                  - id: 2
                    name: readonly
                    policies:
                    - 4
                    - 5
                    - 12
                    - 31
                    - 32
                    - 13
                    - 17
                    - 20
                    - 22
                    - 16
                    - 25
                    - 26
                    - 28
                    - 35
                    users: []
                    rules: []
                  total_affected_items: 7
                  total_failed_items: 0
                  failed_items: []
                message: All specified roles were returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    post:
      tags:
      - Security
      summary: Add role
      description: Add a new role, all fields need to be specified
      operationId: api.controllers.security_controller.add_role
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:create'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolesRequest'
            example:
              name: normal
      responses:
        '200':
          description: Return the information of the new role
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseRoles'
              example:
                data:
                  affected_items:
                  - id: 100
                    name: TestWazuhRole
                    policies: []
                    users: []
                    rules: []
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: Role was successfully created
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '413':
          $ref: '#/components/responses/RequestTooLargeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Security
      summary: Delete roles
      description: Policies linked to roles are not going to be removed
      operationId: api.controllers.security_controller.remove_roles
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:delete'
      parameters:
      - $ref: '#/components/parameters/role_ids_delete'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Remove result
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseRoles'
              example:
                data:
                  affected_items:
                  - id: 4
                    name: administrator
                    policies:
                    - 4
                    - 5
                    rules:
                    - 8
                    users:
                    - 101
                    - 104
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: All specified roles were deleted
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/roles/{role_id}:
    put:
      tags:
      - Security
      summary: Update role
      description: Modify a role, cannot modify associated policies in this endpoint,
        at least one property must be indicated
      operationId: api.controllers.security_controller.update_role
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:update'
      parameters:
      - $ref: '#/components/parameters/role_id'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolesRequest_no_required'
            example:
              name: normal
      responses:
        '200':
          description: Information of role modified
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseRoles'
              example:
                data:
                  affected_items:
                  - id: 5
                    name: normal8
                    policies: []
                    rules:
                    - 100
                    users: []
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: Role was successfully updated
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '413':
          $ref: '#/components/responses/RequestTooLargeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/rules:
    get:
      tags:
      - Security
      summary: List security rules
      description: 'Get a list of security rules from the system or all of them. These
        rules must be mapped with roles to obtain certain access privileges. For a
        specific list, indicate the ids separated by commas. Example: ?rule_ids=1,2,3'
      operationId: api.controllers.security_controller.get_rules
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:read'
      parameters:
      - $ref: '#/components/parameters/security_rule_ids'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/distinct'
      responses:
        '200':
          description: Return a list of security rules
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseRoles'
              example:
                data:
                  affected_items:
                  - id: 1
                    name: wui_elastic_admin
                    rule:
                      FIND:
                        username: elastic
                    roles:
                    - 1
                  - id: 2
                    name: wui_opendistro_admin
                    rule:
                      FIND:
                        username: admin
                    roles:
                    - 1
                  total_affected_items: 2
                  total_failed_items: 0
                  failed_items: []
                message: All specified security rules were returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    post:
      tags:
      - Security
      summary: Add security rule
      description: Add a new security rule
      operationId: api.controllers.security_controller.add_rule
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:create'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityRulesRequest'
            example:
              name: New_Rule
              rule:
                MATCH:
                  definition: normalRule
      responses:
        '200':
          description: Return the information of the new security rule
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseRoles'
              example:
                data:
                  affected_items:
                  - id: 100
                    name: TestWazuhRule
                    rule:
                      MATCH:
                        definition: test_rule
                    roles: []
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: Security rule was successfully created
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '413':
          $ref: '#/components/responses/RequestTooLargeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Security
      summary: Delete security rules
      description: Delete a list of security rules or all security rules in the system,
        roles linked to rules are not going to be deleted
      operationId: api.controllers.security_controller.remove_rules
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:delete'
      parameters:
      - $ref: '#/components/parameters/security_rule_ids_delete'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Remove result
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseRoles'
              example:
                data:
                  affected_items:
                  - id: 100
                    name: TestWazuhRule
                    rule:
                      MATCH:
                        definition: test_rule
                    roles: []
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: All specified security rules were deleted
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/rules/{rule_id}:
    put:
      tags:
      - Security
      summary: Update security rule
      description: Modify a security rule by specifying its ID
      operationId: api.controllers.security_controller.update_rule
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:update'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/security_rule_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityRulesRequest_no_required'
            example:
              name: new_name
              rule:
                MATCH:
                  definition: normalRule
      responses:
        '200':
          description: Security rule updated successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseUsers'
                example:
                  data:
                    affected_items:
                    - id: 100
                      name: TestWazuhRule
                      rule:
                        MATCH:
                          definition: test_rule_updated
                      roles: []
                    total_affected_items: 1
                    total_failed_items: 0
                    failed_items: []
                  message: Security rule was successfully updated
                  error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '413':
          $ref: '#/components/responses/RequestTooLargeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/policies:
    get:
      tags:
      - Security
      summary: List policies
      description: Get all policies in the system, including the administrator policy
      operationId: api.controllers.security_controller.get_policies
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:read'
      parameters:
      - $ref: '#/components/parameters/policy_ids_rbac'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/distinct'
      responses:
        '200':
          description: Return a list of policies
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponsePolicies'
              example:
                data:
                  affected_items:
                  - id: 1
                    name: agents_all_resourceless
                    policy:
                      actions:
                      - agent:create
                      - group:create
                      resources:
                      - '*:*:*'
                      effect: allow
                    roles:
                    - 1
                    - 5
                  - id: 2
                    name: agents_all_agents
                    policy:
                      actions:
                      - agent:read
                      - agent:delete
                      - agent:modify_group
                      - agent:reconnect
                      - agent:restart
                      - agent:upgrade
                      resources:
                      - agent:id:*
                      - agent:id:*
                      effect: allow
                    roles:
                    - 1
                    - 5
                  total_affected_items: 35
                  total_failed_items: 0
                  failed_items: []
                message: All specified policies were returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    post:
      tags:
      - Security
      summary: Add policy
      description: Add a new policy, all fields need to be specified
      operationId: api.controllers.security_controller.add_policy
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:create'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoliciesRequest'
            example:
              name: normal_policy
              policy:
                actions:
                - agent:delete
                resources:
                - agent:id:001
                - agent:id:002
                - agent:id:003
                effect: allow
      responses:
        '200':
          description: Add a policy
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponsePolicies'
              example:
                data:
                  affected_items:
                  - id: 100
                    name: TestWazuhPolicy
                    policy:
                      actions:
                      - security:delete
                      resources:
                      - user:id:*
                      effect: deny
                    roles: []
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: Policy was successfully created
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '413':
          $ref: '#/components/responses/RequestTooLargeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Security
      summary: Delete policies
      description: Delete a list of policies or all policies in the system, roles
        linked to policies are not going to be removed
      operationId: api.controllers.security_controller.remove_policies
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:delete'
      parameters:
      - $ref: '#/components/parameters/policy_ids_rbac_delete'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Operation result
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponsePolicies'
              example:
                data:
                  affected_items:
                  - id: 100
                    name: TestWazuhPolicy
                    policy:
                      actions:
                      - security:delete
                      resources:
                      - user:id:*
                      effect: deny
                    roles: []
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: All specified policies were deleted
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/policies/{policy_id}:
    put:
      tags:
      - Security
      summary: Update policy
      description: Modify a policy, at least one property must be indicated
      operationId: api.controllers.security_controller.update_policy
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:update'
      parameters:
      - $ref: '#/components/parameters/policy_id_rbac'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoliciesRequest_no_required'
            example:
              name: wazuhPolicy
              policy:
                actions:
                - agent:delete
                resources:
                - agent:id:001
                - agent:id:002
                - agent:id:003
                effect: allow
      responses:
        '200':
          description: Information of policy modified
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponsePolicies'
              example:
                data:
                  affected_items:
                  - id: 100
                    name: TestWazuhPolicy
                    policy:
                      actions:
                      - security:delete
                      resources:
                      - user:id:*
                      effect: deny
                    roles: []
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: Policy was successfully updated
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '413':
          $ref: '#/components/responses/RequestTooLargeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/users/{user_id}/roles:
    post:
      tags:
      - Security
      summary: Add roles to user
      description: Create a specified relation role-policy, one user may have multiples
        roles
      operationId: api.controllers.security_controller.set_user_role
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:update'
      parameters:
      - $ref: '#/components/parameters/user_id_required'
      - $ref: '#/components/parameters/role_ids_required'
      - $ref: '#/components/parameters/security_position'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Role information
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseUsers'
              example:
                data:
                  affected_items:
                  - id: 100
                    username: TestWazuhUsername
                    allow_run_as: false
                    roles:
                    - 1
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: All roles were linked to TestWazuhUsername
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Security
      summary: Remove roles from user
      description: Delete a specified relation user-roles
      operationId: api.controllers.security_controller.remove_user_role
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:delete'
      parameters:
      - $ref: '#/components/parameters/user_id_required'
      - $ref: '#/components/parameters/role_ids_delete'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Role information
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseUsers'
              example:
                data:
                  affected_items:
                  - id: 100
                    username: TestWazuhUsername
                    allow_run_as: false
                    roles: []
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: All roles were unlinked from user TestWazuhUsername
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/roles/{role_id}/policies:
    post:
      tags:
      - Security
      summary: Add policies to role
      description: Create a specified relation role-policy, one role may have multiples
        policies
      operationId: api.controllers.security_controller.set_role_policy
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:update'
      parameters:
      - $ref: '#/components/parameters/role_id'
      - $ref: '#/components/parameters/policy_ids_rbac_required'
      - $ref: '#/components/parameters/security_position'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Role information
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
              example:
                data:
                  affected_items:
                  - id: 100
                    name: TestWazuhRole
                    policies:
                    - 100
                    users: []
                    rules: []
                  total_affected_items: 2
                  total_failed_items: 0
                  failed_items: []
                message: All policies were linked to role 100
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Security
      summary: Remove policies from role
      description: Delete a specified relation role-policy
      operationId: api.controllers.security_controller.remove_role_policy
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:delete'
      parameters:
      - $ref: '#/components/parameters/role_id'
      - $ref: '#/components/parameters/policy_ids_rbac_delete'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Role information
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
              example:
                data:
                  affected_items:
                  - id: 100
                    name: TestWazuhRole
                    policies: []
                    users: []
                    rules: []
                  total_affected_items: 2
                  total_failed_items: 0
                  failed_items: []
                message: All policies were unlinked from role 100
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/roles/{role_id}/rules:
    post:
      tags:
      - Security
      summary: Add security rules to role
      description: Create a specific role-rule relation. One role may have multiple
        security rules
      operationId: api.controllers.security_controller.set_role_rule
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:update'
      parameters:
      - $ref: '#/components/parameters/role_id'
      - $ref: '#/components/parameters/security_rule_ids_required'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Role information
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
              example:
                data:
                  affected_items:
                  - id: 100
                    name: TestWazuhRole
                    policies: []
                    users: []
                    rules:
                    - 100
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: All security rules were linked to role 100
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Security
      summary: Remove security rules from role
      description: Delete a specific role-rule relation
      operationId: api.controllers.security_controller.remove_role_rule
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:delete'
      parameters:
      - $ref: '#/components/parameters/role_id'
      - $ref: '#/components/parameters/security_rule_ids_delete'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Role information
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
              example:
                data:
                  affected_items:
                  - id: 100
                    name: TestWazuhRole
                    policies: []
                    users: []
                    rules: []
                  total_affected_items: 2
                  total_failed_items: 0
                  failed_items: []
                message: All security rules were unlinked from role 100
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /security/config:
    get:
      tags:
      - Security
      summary: Get security config
      description: Return the security configuration in JSON format
      operationId: api.controllers.security_controller.get_security_config
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:read_config'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Current security configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                data:
                  auth_token_exp_timeout: 900
                  rbac_mode: white
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    put:
      tags:
      - Security
      summary: Update security config
      description: Update the security configuration with the data contained in the
        API request
      operationId: api.controllers.security_controller.put_security_config
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:update_config'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityConfiguration'
      responses:
        '200':
          description: Configuration successfully updated
          content:
            application/json:
              schema:
                type: object
              example:
                message: Configuration was successfully updated
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '413':
          $ref: '#/components/responses/RequestTooLargeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Security
      summary: Restore default security config
      description: Replaces the security configuration with the original one
      operationId: api.controllers.security_controller.delete_security_config
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/security:update_config'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Configuration successfully updated
          content:
            application/json:
              schema:
                type: object
              example:
                message: Configuration was successfully updated
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        message:
          type: string
          description: Human readable description to explain the result of the request
    AllItemsResponseRoles:
      allOf:
      - $ref: '#/components/schemas/AllItemsResponse'
      - type: object
        required:
        - affected_items
        properties:
          affected_items:
            type: array
            description: Items that successfully applied the API call action
            items:
              $ref: '#/components/schemas/RolesResponse'
    AllItemsResponsePolicies:
      allOf:
      - $ref: '#/components/schemas/AllItemsResponse'
      - type: object
        required:
        - affected_items
        properties:
          affected_items:
            type: array
            description: Items that successfully applied the API call action
            items:
              oneOf:
              - $ref: '#/components/schemas/PoliciesResponse'
              - type: integer
    AllItemsResponseUsers:
      allOf:
      - $ref: '#/components/schemas/AllItemsResponse'
      - type: object
        required:
        - affected_items
        properties:
          affected_items:
            type: array
            description: Items that successfully applied the API call action
            items:
              $ref: '#/components/schemas/UsersResponse'
    PoliciesRequest:
      type: object
      required:
      - name
      - policy
      properties:
        name:
          description: Policy name
          type: string
          maxLength: 64
          format: names
        policy:
          description: New policy definition
          type: object
          properties:
            actions:
              type: array
              description: Actions to perform
              items:
                type: string
            resources:
              type: array
              description: Resources to apply the actions on
              items:
                type: string
            effect:
              type: string
              description: Effect of the policy
          required:
          - actions
          - resources
          - effect
    PoliciesRequest_no_required:
      type: object
      properties:
        name:
          description: Policy name
          type: string
          maxLength: 64
          format: names
        policy:
          description: New policy definition
          type: object
          properties:
            actions:
              type: array
              description: Actions to perform
              items:
                type: string
            resources:
              type: array
              description: Resources to apply the actions on
              items:
                type: string
            effect:
              type: string
              description: Effect of the policy
          required:
          - actions
          - resources
          - effect
    RolesRequest:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Role name
          maxLength: 64
          format: names
    RolesRequest_no_required:
      type: object
      properties:
        name:
          type: string
          description: Role name
          maxLength: 64
          format: names
    SecurityRulesRequest:
      type: object
      required:
      - name
      - rule
      properties:
        name:
          type: string
          description: Rule name
          maxLength: 64
          format: names
        rule:
          type: object
          description: Rule body
    SecurityRulesRequest_no_required:
      type: object
      properties:
        name:
          type: string
          description: Rule name
          maxLength: 64
          format: names
        rule:
          type: object
          description: Rule body
    Token:
      type: object
      properties:
        token:
          type: string
          description: User's JWT token
    SecurityConfiguration:
      type: object
      minProperties: 1
      properties:
        auth_token_exp_timeout:
          description: Time in seconds until the token expires
          type: integer
          format: int32
          minimum: 30
          example: 900
        rbac_mode:
          description: RBAC mode (white/black)
          type: string
          enum:
          - white
          - black
          example: white
  responses:
    ResponseError:
      description: Response to report a bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Bad Request
            detail: '''{invalid_param}'' is not a ''{expected_type}''. Failed validating
              ''format'' in schema[''items'']: {''description'': ''{parameter_name}'',
              ''format'': ''{expected_format}'', ''minLength'': {expected_length},
              ''type'': ''{expected_type}'', ''x-scope'': ['''', ''#/components/parameters/{parameter_name}'']}'
    PermissionDeniedResponse:
      description: Response to report a permission denied request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            title: Permission Denied
            detail: 'Permission denied: Resource type: *:*'
            remediation: Please, make sure you have permissions to execute the current
              request. For more information on how to set up permissions, please visit
              https://documentation.wazuh.com/4.9/user-manual/api/rbac/configuration.html
            error: 4000
            dapi_errors:
              unknown-node:
                error: 'Permission denied: Resource type: *:*'
    UnauthorizedResponse:
      description: Response to report an unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Unauthorized
            detail: No authorization token provided
    InvalidCredentialsResponse:
      description: Response to report a problem with authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Unauthorized
            detail: Invalid credentials
    InvalidHTTPMethodResponse:
      description: Response to report an invalid HTTP method
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Method Not Allowed
            detail: Specified method is invalid for this resource
    WrongContentTypeResponse:
      description: Response to report an invalid content-type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Wazuh Error
            detail: The body type is not the one specified in the content-type
            error: 6002
    RequestTooLargeResponse:
      description: Maximum request body size exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Request Entity Too Large
            detail: Maximum request body size 1048576 exceeded, actual body size 1225245
    TooManyRequestsResponse:
      description: Maximum number of request per minute reached
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Wazuh Error
            detail: Maximum number of requests per minute reached
            remediation: 'This limit can be changed in api.yaml file. More information
              here: https://documentation.wazuh.com/4.9/user-manual/api/security/configuration.html'
            code: 6001
  parameters:
    limit:
      in: query
      name: limit
      description: 'Maximum number of elements to return. Although up to 100.000 can
        be specified, it is recommended not to exceed 500 elements. Responses may
        be slower the more this number is exceeded. '
      schema:
        type: integer
        format: int32
        default: 500
        minimum: 1
        maximum: 100000
    offset:
      in: query
      name: offset
      description: First element to return in the collection
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
    pretty:
      in: query
      name: pretty
      description: Show results in human-readable format
      schema:
        type: boolean
        default: false
    policy_id_rbac:
      in: path
      name: policy_id
      description: Specify a policy id
      required: true
      schema:
        $ref: '#/components/schemas/Policy_id'
    policy_ids_rbac:
      in: query
      name: policy_ids
      description: List of policy IDs
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Policy_id'
    policy_ids_rbac_delete:
      in: query
      name: policy_ids
      description: List of policy IDs (separated by comma), use the keyword 'all'
        to select all policies
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Policy_id_DELETE'
    policy_ids_rbac_required:
      in: query
      name: policy_ids
      description: List of policy IDs
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Policy_id'
    endpoint:
      in: query
      name: endpoint
      description: Look for the RBAC actions which are related to the specified endpoint
      schema:
        type: string
    query:
      in: query
      name: q
      description: Query to filter results by. For example q=&quot;status=active&quot;
      schema:
        type: string
    raw:
      in: query
      name: raw
      description: Format response in plain text
      required: false
      schema:
        type: boolean
    role_id:
      in: path
      name: role_id
      description: Specify a role ID
      required: true
      schema:
        $ref: '#/components/schemas/Role_id'
    role_ids:
      in: query
      name: role_ids
      description: List of role IDs (separated by comma)
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Role_id'
    role_ids_delete:
      in: query
      name: role_ids
      description: List of role IDs (separated by comma), use the keyword 'all' to
        select all roles
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Role_id_DELETE'
    role_ids_required:
      in: query
      name: role_ids
      description: List of role IDs (separated by comma)
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Role_id_DELETE'
    security_rule_id:
      in: path
      name: rule_id
      description: Specify a rule ID
      required: true
      schema:
        $ref: '#/components/schemas/Security_rule_id'
    security_rule_ids:
      in: query
      name: rule_ids
      description: List of rule IDs (separated by comma)
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Security_rule_id'
    security_rule_ids_required:
      in: query
      name: rule_ids
      description: List of rule IDs (separated by comma)
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Security_rule_id'
    security_rule_ids_delete:
      in: query
      name: rule_ids
      description: List of rule IDs (separated by comma), use the keyword 'all' to
        select all rules
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Security_rule_id_DELETE'
    security_position:
      in: query
      name: position
      description: Security position for roles/policies
      required: false
      schema:
        type: integer
        minimum: 0
    search:
      in: query
      name: search
      description: Look for elements containing the specified string. To obtain a
        complementary search, use '-' at the beginning
      schema:
        type: string
        format: search
    select:
      in: query
      name: select
      description: 'Select which fields to return (separated by comma). Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: array
        items:
          type: string
          format: names
    sort:
      in: query
      name: sort
      description: 'Sort the collection by a field or fields (separated by comma).
        Use +/- at the beggining to list in ascending or descending order. Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: string
        format: sort
    allow_run_as:
      in: query
      name: allow_run_as
      description: Value for the allow_run_as flag
      schema:
        type: boolean
        default: false
    user_ids:
      in: query
      name: user_ids
      description: List of user IDs (separated by comma)
      schema:
        type: array
        items:
          $ref: '#/components/schemas/User_id'
    user_ids_delete:
      in: query
      name: user_ids
      description: List of user IDs (separated by comma), use the keyword 'all' to
        select all users
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/User_id_DELETE'
    user_id_required:
      in: path
      name: user_id
      description: User ID
      required: true
      schema:
        $ref: '#/components/schemas/User_id'
    wait_for_complete:
      in: query
      name: wait_for_complete
      description: Disable timeout response
      schema:
        type: boolean
        default: false
    distinct:
      in: query
      name: distinct
      description: Look for distinct values.
      schema:
        type: boolean
        default: false
    resource_list:
      in: query
      name: resource
      description: List of current RBAC's resources.
      schema:
        type: string
        enum:
        - '*:*'
        - agent:group
        - agent:id
        - group:id
        - node:id
        - decoder:file
        - list:file
        - rule:file
        - policy:id
        - role:id
        - user:id

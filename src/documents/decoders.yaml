openapi: 3.0.0
paths:
  /decoders:
    get:
      tags:
      - Decoders
      summary: List decoders
      description: Return information about all decoders included in ossec.conf. This
        information include decoder's route, decoder's name, decoder's file among
        others
      operationId: api.controllers.decoder_controller.get_decoders
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/decoders:read'
      parameters:
      - $ref: '#/components/parameters/decoder_name'
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/filename'
      - $ref: '#/components/parameters/get_dirnames_path'
      - $ref: '#/components/parameters/statusRLDParam'
      - $ref: '#/components/parameters/distinct'
      responses:
        '200':
          description: List of decoders included in ossec.conf
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseDecoders'
              example:
                data:
                  affected_items:
                  - filename: 0005-wazuh_decoders.xml
                    relative_dirname: ruleset/decoders
                    status: enabled
                    name: wazuh
                    position: 0
                    details:
                      prematch:
                        pattern: '^wazuh: '
                  - filename: 0005-wazuh_decoders.xml
                    relative_dirname: ruleset/decoders
                    status: enabled
                    name: agent-buffer
                    position: 1
                    details:
                      parent: wazuh
                      prematch:
                        pattern: '^wazuh: '
                        offset: after_parent
                      regex:
                        pattern: ^ '(\S+)'.
                        offset: after_prematch
                      order: level
                  total_affected_items: 2
                  total_failed_items: 0
                  failed_items: []
                message: All selected decoders were returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /decoders/files:
    get:
      tags:
      - Decoders
      summary: Get files
      description: Return information about all decoders files used in Wazuh. This
        information include decoder's file, decoder's route and decoder's status among
        others
      operationId: api.controllers.decoder_controller.get_decoders_files
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/decoders:read'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/xml_filename'
      - $ref: '#/components/parameters/get_dirnames_path'
      - $ref: '#/components/parameters/statusRLDParam'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/distinct'
      responses:
        '200':
          description: List of decoders files
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponseDecodersFiles'
              example:
                data:
                  affected_items:
                  - filename: 0005-wazuh_decoders.xml
                    relative_dirname: ruleset/decoders
                    status: enabled
                  - filename: 0006-json_decoders.xml
                    relative_dirname: ruleset/decoders
                    status: enabled
                  - filename: 0010-active-response_decoders.xml
                    relative_dirname: ruleset/decoders
                    status: enabled
                  total_affected_items: 3
                  total_failed_items: 0
                  failed_items: []
                message: All decoder files were returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /decoders/files/{filename}:
    get:
      tags:
      - Decoders
      summary: Get decoders file content
      description: Get the content of a specified decoder file
      operationId: api.controllers.decoder_controller.get_file
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/decoders:read'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/xml_filename_path'
      - $ref: '#/components/parameters/raw'
      - $ref: '#/components/parameters/get_dirnames_path'
      responses:
        '200':
          description: Decoder content
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - decoder:
                    - '@name': wazuh
                      prematch: '^wazuh:'
                    - '@name': agent-buffer
                      parent: wazuh
                      prematch:
                        '@offset': after_parent
                        '#text': '^Agent buffer:'
                      regex:
                        '@offset': after_prematch
                        '#text': ^ '(\S+)'.
                      order: level
                    - '@name': agent-upgrade
                      parent: wazuh
                      prematch:
                        '@offset': after_parent
                        '#text': ^Upgrade procedure |^Custom installation
                      regex:
                        '@offset': after_prematch
                        '#text': on agent (\d\d\d)\s\((\S+)\):\s(\w+)
                      order: agent.id, agent.name, status
                    - '@name': agent-upgrade
                      parent: wazuh
                      regex: aborted:\s(\.+)$|failed:\s(\.+)$|lost:\s(\.+)$
                      order: error
                    - '@name': agent-upgrade
                      parent: wazuh
                      regex: started.\sCurrent\sversion:\sWazuh\s(\.+)$
                      order: agent.cur_version
                    - '@name': agent-upgrade
                      parent: wazuh
                      regex: succeeded.\sNew\sversion:\sWazuh\s(\.+)$
                      order: agent.new_version
                    - '@name': agent-restart
                      parent: wazuh
                      prematch:
                        '@offset': after_parent
                        '#text': '^Invalid remote configuration:'
                      regex:
                        '@offset': after_prematch
                        '#text': ^ '(\S+)'.
                      order: module
                    - '@name': fim-state
                      parent: wazuh
                      prematch:
                        '@offset': after_parent
                        '#text': '^FIM DB:'
                      plugin_decoder:
                        '@offset': after_prematch
                        '#text': JSON_Decoder
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: Selected decoder was returned
                error: 0
            application/xml:
              schema:
                type: string
              example: "<!--\n  -  Wazuh decoders\n  -  Created by Wazuh, Inc.\n \
                \ -  Copyright (C) 2015, Wazuh Inc.\n  -  This program is a free software;\
                \ you can redistribute it and/or modify it under the terms of GPLv2.\n\
                -->\n<decoder name=\"wazuh\">\n  <prematch>^wazuh: </prematch>\n</decoder>\n\
                <decoder name=\"agent-buffer\">\n  <parent>wazuh</parent>\n  <prematch\
                \ offset=\"after_parent\">^Agent buffer:</prematch>\n  <regex offset=\"\
                after_prematch\">^ '(\\S+)'.</regex>\n  <order>level</order>\n</decoder>\n\
                <decoder name=\"agent-upgrade\">\n  <parent>wazuh</parent>\n  <prematch\
                \ offset=\"after_parent\">^Upgrade procedure |^Custom installation\
                \ </prematch>\n  <regex offset=\"after_prematch\">on agent (\\d\\\
                d\\d)\\s\\((\\S+)\\):\\s(\\w+)</regex>\n  <order>agent.id, agent.name,\
                \ status</order>\n</decoder>\n<decoder name=\"agent-upgrade\">\n \
                \ <parent>wazuh</parent>\n  <regex>aborted:\\s(\\.+)$|failed:\\s(\\\
                .+)$|lost:\\s(\\.+)$</regex>\n  <order>error</order>\n</decoder>\n\
                <decoder name=\"agent-upgrade\">\n  <parent>wazuh</parent>\n  <regex>started.\\\
                sCurrent\\sversion:\\sWazuh\\s(\\.+)$</regex>\n  <order>agent.cur_version</order>\n\
                </decoder>\n<decoder name=\"agent-upgrade\">\n  <parent>wazuh</parent>\n\
                \  <regex>succeeded.\\sNew\\sversion:\\sWazuh\\s(\\.+)$</regex>\n\
                \  <order>agent.new_version</order>\n</decoder>\n<decoder name=\"\
                agent-restart\">\n  <parent>wazuh</parent>\n  <prematch offset=\"\
                after_parent\">^Invalid remote configuration:</prematch>\n  <regex\
                \ offset=\"after_prematch\">^ '(\\S+)'.</regex>\n  <order>module</order>\n\
                </decoder>\n<decoder name=\"fim-state\">\n  <parent>wazuh</parent>\n\
                \  <prematch offset=\"after_parent\">^FIM DB: </prematch>\n  <plugin_decoder\
                \ offset=\"after_prematch\">JSON_Decoder</plugin_decoder>\n</decoder>\n"
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    put:
      tags:
      - Decoders
      summary: Update decoders file
      description: Upload or replace a user decoder file content
      operationId: api.controllers.decoder_controller.put_file
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/decoders:update'
      - $ref: '#/x-rbac-catalog/actions/decoders:delete'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/xml_filename_path'
      - $ref: '#/components/parameters/overwrite'
      - $ref: '#/components/parameters/get_dirnames_path'
      requestBody:
        description: Content of the decoder to be uploaded
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Confirmation message
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - etc/decoders/new_decoder.xml
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: Decoder was successfully uploaded
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '406':
          $ref: '#/components/responses/WrongContentTypeResponse'
        '413':
          $ref: '#/components/responses/RequestTooLargeResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
    delete:
      tags:
      - Decoders
      summary: Delete decoders file
      description: Delete a specified decoder file
      operationId: api.controllers.decoder_controller.delete_file
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/decoders:delete'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/xml_filename_path'
      - $ref: '#/components/parameters/get_dirnames_path'
      responses:
        '200':
          description: Confirmation message
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - etc/decoders/new_decoder.xml
                  total_affected_items: 1
                  total_failed_items: 0
                  failed_items: []
                message: Decoder file was successfully deleted
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
  /decoders/parents:
    get:
      tags:
      - Decoders
      summary: Get parent decoders
      description: Return information about all parent decoders. A parent decoder
        is a decoder used as base of other decoders
      operationId: api.controllers.decoder_controller.get_decoders_parents
      x-rbac-actions:
      - $ref: '#/x-rbac-catalog/actions/decoders:read'
      parameters:
      - $ref: '#/components/parameters/pretty'
      - $ref: '#/components/parameters/wait_for_complete'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: List of parent decoders
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllItemsResponse'
              example:
                data:
                  affected_items:
                  - filename: 0005-wazuh_decoders.xml
                    relative_dirname: ruleset/decoders
                    status: enabled
                    name: wazuh
                    position: 0
                    details:
                      prematch:
                        pattern: '^wazuh: '
                  - filename: 0006-json_decoders.xml
                    relative_dirname: ruleset/decoders
                    status: enabled
                    name: json
                    position: 0
                    details:
                      prematch:
                        patten: ^{\\s*\"
                      plugin_decoder: JSON_Decoder
                  total_affected_items: 182
                  total_failed_items: 0
                  failed_items: []
                message: All selected decoders were returned
                error: 0
        '400':
          $ref: '#/components/responses/ResponseError'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/PermissionDeniedResponse'
        '405':
          $ref: '#/components/responses/InvalidHTTPMethodResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsResponse'
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        message:
          type: string
          description: Human readable description to explain the result of the request
    AllItemsResponse:
      type: object
      required:
      - total_affected_items
      - failed_items
      - total_failed_items
      properties:
        total_affected_items:
          type: integer
          format: int32
          description: Number of items that have successfully applied the requested
            operation
        failed_items:
          type: array
          description: List of items that have failed applying the requested operation
          items:
            $ref: '#/components/schemas/SimpleApiError'
        total_failed_items:
          type: integer
          format: int32
          description: Number of items that have failed applying the requested operation
    AllItemsResponseDecoders:
      allOf:
      - $ref: '#/components/schemas/AllItemsResponse'
      - type: object
        required:
        - affected_items
        properties:
          affected_items:
            type: array
            description: Items that successfully applied the API call action
            items:
              $ref: '#/components/schemas/Decoder'
    AllItemsResponseDecodersFiles:
      allOf:
      - $ref: '#/components/schemas/AllItemsResponse'
      - type: object
        required:
        - affected_items
        properties:
          affected_items:
            type: array
            description: Items that successfully applied the API call action
            items:
              $ref: '#/components/schemas/DecoderFile'
  responses:
    ResponseError:
      description: Response to report a bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Bad Request
            detail: '''{invalid_param}'' is not a ''{expected_type}''. Failed validating
              ''format'' in schema[''items'']: {''description'': ''{parameter_name}'',
              ''format'': ''{expected_format}'', ''minLength'': {expected_length},
              ''type'': ''{expected_type}'', ''x-scope'': ['''', ''#/components/parameters/{parameter_name}'']}'
    PermissionDeniedResponse:
      description: Response to report a permission denied request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            title: Permission Denied
            detail: 'Permission denied: Resource type: *:*'
            remediation: Please, make sure you have permissions to execute the current
              request. For more information on how to set up permissions, please visit
              https://documentation.wazuh.com/4.9/user-manual/api/rbac/configuration.html
            error: 4000
            dapi_errors:
              unknown-node:
                error: 'Permission denied: Resource type: *:*'
    UnauthorizedResponse:
      description: Response to report an unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Unauthorized
            detail: No authorization token provided
    InvalidHTTPMethodResponse:
      description: Response to report an invalid HTTP method
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Method Not Allowed
            detail: Specified method is invalid for this resource
    WrongContentTypeResponse:
      description: Response to report an invalid content-type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Wazuh Error
            detail: The body type is not the one specified in the content-type
            error: 6002
    RequestTooLargeResponse:
      description: Maximum request body size exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Request Entity Too Large
            detail: Maximum request body size 1048576 exceeded, actual body size 1225245
    TooManyRequestsResponse:
      description: Maximum number of request per minute reached
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            title: Wazuh Error
            detail: Maximum number of requests per minute reached
            remediation: 'This limit can be changed in api.yaml file. More information
              here: https://documentation.wazuh.com/4.9/user-manual/api/security/configuration.html'
            code: 6001
  parameters:
    decoder_name:
      in: query
      name: decoder_names
      description: Decoder name
      schema:
        type: array
        items:
          type: string
          format: names
    filename:
      in: query
      name: filename
      description: Filter by filename
      schema:
        type: array
        items:
          type: string
          format: alphanumeric
    limit:
      in: query
      name: limit
      description: 'Maximum number of elements to return. Although up to 100.000 can
        be specified, it is recommended not to exceed 500 elements. Responses may
        be slower the more this number is exceeded. '
      schema:
        type: integer
        format: int32
        default: 500
        minimum: 1
        maximum: 100000
    offset:
      in: query
      name: offset
      description: First element to return in the collection
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
    pretty:
      in: query
      name: pretty
      description: Show results in human-readable format
      schema:
        type: boolean
        default: false
    query:
      in: query
      name: q
      description: Query to filter results by. For example q=&quot;status=active&quot;
      schema:
        type: string
    raw:
      in: query
      name: raw
      description: Format response in plain text
      required: false
      schema:
        type: boolean
    search:
      in: query
      name: search
      description: Look for elements containing the specified string. To obtain a
        complementary search, use '-' at the beginning
      schema:
        type: string
        format: search
    select:
      in: query
      name: select
      description: 'Select which fields to return (separated by comma). Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: array
        items:
          type: string
          format: names
    sort:
      in: query
      name: sort
      description: 'Sort the collection by a field or fields (separated by comma).
        Use +/- at the beggining to list in ascending or descending order. Use ''.''
        for nested fields. For example, ''{field1: field2}'' may be selected with
        ''field1.field2'''
      schema:
        type: string
        format: sort
    statusRLDParam:
      in: query
      name: status
      description: Filter by list status. Use commas to enter multiple statuses
      schema:
        type: string
        enum:
        - enabled
        - disabled
        - all
        minItems: 1
    wait_for_complete:
      in: query
      name: wait_for_complete
      description: Disable timeout response
      schema:
        type: boolean
        default: false
    get_dirnames_path:
      in: query
      name: relative_dirname
      description: Filter by relative directory name
      schema:
        type: string
        format: get_dirnames_path
    overwrite:
      in: query
      name: overwrite
      description: If set to false, an exception will be raised when updating contents
        of an already existing filename
      schema:
        type: boolean
        default: false
    distinct:
      in: query
      name: distinct
      description: Look for distinct values.
      schema:
        type: boolean
        default: false
    xml_filename:
      in: query
      name: filename
      description: Filter by filename of one or more rule or decoder files.
      schema:
        type: array
        items:
          type: string
          format: xml_filename
    xml_filename_path:
      in: path
      name: filename
      description: Filename (rule or decoder) to download/upload/edit file.
      required: true
      schema:
        type: string
        format: xml_filename_path
